##########################################################################
# PostgreSQL
##########################################################################
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: alfresco
  labels:
    app: alfresco
    tiers: database
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: alfresco
    tiers: database
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: alfresco
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alfresco
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: alfresco
        tiers: database
    spec:
      containers:
      - image: amd64/postgres:9.4
        name: postgres
        env:
        - name: POSTGRES_DB
          value: alfresco
        - name: POSTGRES_USER
          value: alfresco
        # $ kubectl create secret generic postgres-pass --from-file=alfresco.postgres.password.txt
        # make sure postgres.password.txt does not have a trailing newline
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: alfresco-pass
              key: alfresco.postgres.password.txt
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: alfresco-db
          mountPath: /var/lib/postgresql/data
          subPath: data
        - name: alfresco-db
          mountPath: /var/log/postgresql
          subPath: log
      volumes:
      - name: alfresco-db
        persistentVolumeClaim:
          claimName: alfresco-db
---
##########################################################################
# Alfresco Search Services
##########################################################################
apiVersion: v1
kind: Service
metadata:
  name: search
  namespace: alfresco
  labels:
    app: alfresco
    tiers: search
spec:
  type: ClusterIP
  ports:
  - name: solr-http
    port: 8983
    targetPort: 8983
    protocol: TCP
  selector:
    app: alfresco
    tiers: search
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: search
  namespace: alfresco
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alfresco
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: alfresco
        tiers: search
    spec:
      containers:
      - image: fjudith/alfresco:search
        name: search
        ports:
        - containerPort: 8983
          name: solr-http
        volumeMounts:
        - name: alfresco-search-alfresco
          mountPath: /usr/share/alfresco-search-services/solrhome/alfresco
        - name: alfresco-search-archive
          mountPath: /usr/share/alfresco-search-services/solrhome/archive
        - name: alfresco-search-contentstore
          mountPath: /usr/share/alfresco-search-services/contentstore
      volumes:
      - name: alfresco-search-alfresco
        persistentVolumeClaim:
          claimName: alfresco-search-alfresco
      - name: alfresco-search-archive
        persistentVolumeClaim:
          claimName: alfresco-search-archive
      - name: alfresco-search-contentstore
        persistentVolumeClaim:
          claimName: alfresco-search-contentstore
---
##########################################################################
# Libreoffice Services
##########################################################################
apiVersion: v1
kind: Service
metadata:
  name: libreoffice
  namespace: alfresco
  labels:
    app: alfresco
    tiers: converter
spec:
  type: ClusterIP
  ports:
  - name: libreoffice
    port: 8100
    targetPort: 8100
    protocol: TCP
  selector:
    app: alfresco
    tiers: converter
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: libreoffice
  namespace: alfresco
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alfresco
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: alfresco
        tiers: converter
    spec:
      containers:
      - image: fjudith/alfresco:libreoffice
        name: libreoffice
        ports:
        - containerPort: 8100
          name: libreoffice
---
##########################################################################
# Alfresco Content Repository
##########################################################################
apiVersion: v1
kind: Service
metadata:
  name: repository
  namespace: alfresco
  labels:
    app: alfresco
    tiers: engine
spec:
  type: ClusterIP
  ports:
  - name: netbios-ns
    port: 137
    targetPort: 137
    protocol: UDP
  - name: netbios-dgm
    port: 138
    targetPort: 138
    protocol: UDP
  - name: netbios-ssn
    port: 139
    targetPort: 139
    protocol: TCP
  - name: ftp
    port: 21
    targetPort: 21
    protocol: TCP
  - name: microsoft-ds
    port: 445
    targetPort: 445
    protocol: TCP
  - name: http-proxy
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: alfresco
    tiers: engine
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: repository
  namespace: alfresco
  labels:
    app: alfresco
    tiers: engine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alfresco
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: alfresco
        tiers: engine
    spec:
      containers:
      - image: fjudith/alfresco:repository
        name: alfresco
        env: 
        - name: ALFRESCO_HOSTNAME
          value: docs.example.com
        - name: ALFRESCO_PROTOCOL
          value: http
        - name: ALFRESCO_PORT
          value: "8080"
        - name: SHARE_HOSTNAME
          value: docs.example.com
        - name: SHARE_PROTOCOL
          value: http
        - name: SHARE_PORT
          value: "8080"
        - name: DB_KIND
          value: postgresql
        - name: DB_HOST
          value: postgres
        - name: DB_NAME
          value: alfresco
        - name: DB_USERNAME
          value: alfresco
        # $ kubectl create secret generic postgres-pass --from-file=alfresco.postgres.password.txt
        # make sure postgres.password.txt does not have a trailing newline
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: alfresco-pass
              key: alfresco.postgres.password.txt
        - name: OOO_ENABLED
          value: "true"
        - name: OOO_HOSTNAME
          value: "libreoffice"
        - name: OOO_PORT
          value: "8100"
        - name: SOLR_INDEX_SUBSYSTEM
          value: "solr6"
        - name: SOLR_HOST
          value: "search"
        - name: SOLR_PORT
          value: "8983"
        ports:
        - containerPort: 137
          name: netbios-ns
        - containerPort: 138
          name: netbios-dgm
        - containerPort: 139
          name: netbios-ssn
        - containerPort: 21
          name: ftp
        - containerPort: 445
          name: microsoft-ds
        - containerPort: 8080
          name: http-proxy
        volumeMounts:
        - name: alfresco-data
          mountPath: /var/lib/alfresco/alf_data
          subPath: data
        - name: alfresco-data
          mountPath: /usr/share/tomcat/logs
          subPath: log
        livenessProbe:
          tcpSocket:
              port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: 8080
          timeoutSeconds: 5
      initContainers:
      - name: init-postgres
        image: busybox
        command: ['sh', '-c', 'until nc -zv -w 5 postgres 5432; do echo waiting for postgres; sleep 2; done;']
      volumes:
      - name: alfresco-data
        persistentVolumeClaim:
          claimName: alfresco-data
---
##########################################################################
# Alfresco Share
##########################################################################
apiVersion: v1
kind: Service
metadata:
  name: share
  namespace: alfresco
  labels:
    app: alfresco
    tiers: frontend
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: alfresco
    tiers: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: share
  namespace: alfresco
  labels:
    app: alfresco
    tiers: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alfresco
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: alfresco
        tiers: frontend
    spec:
      containers:
      - image: fjudith/alfresco:share
        name: share
        env:
        - name: ALFRESCO_HOST
          value: repository
        - name: ALFRESCO_PORT
          value: "8080"
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 30
---
##########################################################################
# Ingress resource (gateway)
##########################################################################
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: gateway
  namespace: alfresco
  annotations:
    kubernetes.io/ingress.class: "traefik"
spec:
  rules:
  - http:
      paths:
      - path: /share
        backend:
          serviceName: share
          servicePort: 8080
      - path: /alfresco
        backend:
          serviceName: repository
          servicePort: 8080